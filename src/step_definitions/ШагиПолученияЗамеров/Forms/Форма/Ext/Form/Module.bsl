
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

Перем ВыполнятьЗамерИнициализирован;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯНачинаюЗамерПроизводительностиПоАдресуПорт(Парам01,Парам02)","ЯНачинаюЗамерПроизводительностиПоАдресуПорт","Допустим Я начинаю замер производительности по адресу 'АдресХоста' порт 'Порт'","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗавершаюЗамерПроизводительностиПоАдресуПорт(Парам01,Парам02)","ЯЗавершаюЗамерПроизводительностиПоАдресуПорт","Допустим Я завершаю замер производительности по адресу 'АдресХоста' порт 'Порт'","","");

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯБудуВыполнятьЗамер(Парам01)","ЯБудуВыполнятьЗамер","Допустим Я буду выполнять замер 'Буду'","","");
		
	
	Возврат ВсеТесты;
	
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	ИнициализацияЗамера();
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции

&НаКлиенте
Процедура ИнициализацияЗамера()
	
	Если КонтекстСохраняемый.Свойство("ВыполнятьЗамерИнициализирован") Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыполнятьЗамерИзПеременнойСреды = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ВыполнятьЗамерИзПеременнойСреды");
	Если ВыполнятьЗамерИзПеременнойСреды = Неопределено Тогда
		ВыполнятьЗамерИзПеременнойСреды = Ложь;
	КонецЕсли;	
	
	ВыполнятьЗамерИзUserSetting = Ванесса.ПолучитьСохраненноеЗначениеИзКонтекстаСохраняемого("ВыполнятьЗамерИзUserSetting");
	Если ВыполнятьЗамерИзUserSetting = Неопределено Тогда
		ВыполнятьЗамерИзUserSetting = Ложь;
	КонецЕсли;	

	ВыполнятьЗамер = ВыполнятьЗамерИзПеременнойСреды ИЛИ ВыполнятьЗамерИзUserSetting; 
	КонтекстСохраняемый.Вставить("ВыполнятьЗамер", ВыполнятьЗамер); 
	КонтекстСохраняемый.Вставить("ВыполнятьЗамерИнициализирован", Истина);
	
КонецПроцедуры	

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим Я начинаю замер производительности по адресу 'АдресХоста' порт 'Порт'
//@ЯНачинаюЗамерПроизводительностиПоАдресуПорт(Парам01,Парам02)
Функция ЯНачинаюЗамерПроизводительностиПоАдресуПорт(АдресХоста, Порт) Экспорт
		
	Если НЕ КонтекстСохраняемый.ВыполнятьЗамер Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПортЧислом = Число(Порт);
	
	HTTPСоединение = Новый HTTPСоединение(АдресХоста, ПортЧислом, , , , 5);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("accept-charset", "utf-8");
	Заголовки.Вставить("content-type", "application/xml");
	
	HTTPЗапрос = Новый HTTPЗапрос("/e1crdbg/rdbg?cmd=setMeasureMode", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаВключитьЗамер());
	
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Сообщить("Произошла сетевая ошибка!");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//Допустим Я завершаю замер производительности по адресу 'АдресХоста' порт 'Порт'
//@ЯЗавершаюЗамерПроизводительностиПоАдресуПорт(Парам01,Парам02)
Функция ЯЗавершаюЗамерПроизводительностиПоАдресуПорт(АдресХоста, Порт) Экспорт
		
	Если НЕ КонтекстСохраняемый.ВыполнятьЗамер Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	ПортЧислом = Число(Порт);
	
	HTTPСоединение = Новый HTTPСоединение(АдресХоста, ПортЧислом, , , , 5);
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("accept-charset", "utf-8");
	Заголовки.Вставить("content-type", "application/xml");
	
	HTTPЗапрос = Новый HTTPЗапрос("/e1crdbg/rdbg?cmd=setMeasureMode", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаВыключитьЗамер());
	
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Сообщить("Произошла сетевая ошибка!");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
//Допустим Я буду выполнять замер 'Буду'
//@ЯНачинаюЗамерПроизводительностиПоАдресуПорт(Парам01,Парам02)
Функция ЯБудуВыполнятьЗамер(Буду = Истина) Экспорт
	
	КонтекстСохраняемый.Вставить("ВыполнятьЗамер", Буду);
		
КонецФункции

&НаКлиенте
Функция ТелоЗапросаВключитьЗамер()
	
	Возврат ПолучитьМакетОбработки("ВключитьЗамер").ПолучитьТекст();
	
КонецФункции

&НаКлиенте
Функция ТелоЗапросаВыключитьЗамер()
	
	Возврат ПолучитьМакетОбработки("ВыключитьЗамер").ПолучитьТекст();
	
КонецФункции