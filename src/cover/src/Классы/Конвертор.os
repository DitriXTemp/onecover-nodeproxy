
Перем Лог;
Перем ДанныеКонфигурации;
Перем ПолеДанныеПокрытия;
Перем ПутьКФайлуКонфигурации;

Процедура ПриСозданииОбъекта()

	ПолеДанныеПокрытия = Новый ДанныеПокрытия();

КонецПроцедуры	

Процедура ПодготовитьЛог(ИсходныйТекст) Экспорт

	Лог = СтрЗаменить(ИсходныйТекст, "xmlns:", "");
	Лог = СтрЗаменить(Лог, "debugMeasure:", "");
	Лог = СтрЗаменить(Лог, "dbgtgtRemoteRequestResponse:", "");
	Лог = СтрЗаменить(Лог, "xsi:", "");
	Лог = СтрЗаменить(Лог, "debugRDBGRequestResponse:", "");
	Лог = СтрЗаменить(Лог, "debugRTEFilter:", "");
	Лог = СтрЗаменить(Лог, "debugAutoAttach:", "");
	Лог = СтрЗаменить(Лог, "dbgtgtData:", "");
	

	Лог = СтрЗаменить(Лог, "d2p1:", "");

	Лог = СтрЗаменить(Лог, "$", "Start");
	
	json = Новый ЧтениеJSON();
	json.УстановитьСтроку(Лог);
	Лог = ПрочитатьJson(json);
	json.Закрыть();

	// ПомошникЗаписи.ЗаписатьВJson(Лог, "./out/log" + ТекущаяУниверсальнаяДатаВМиллисекундах() + ".json");

	ПолеДанныеПокрытия.РазобратьЛог(Лог, ДанныеКонфигурации);

КонецПроцедуры	

Процедура УстановитьФайлКонфигурации(ВхПутьКФайлуКонфигурации) Экспорт

	ПутьКФайлуКонфигурации = ВхПутьКФайлуКонфигурации;
	ДанныеКонфигурации = Новый ДанныеКофигурации(ПутьКФайлуКонфигурации);

КонецПроцедуры	

Процедура СохранитьРезультат(КаталогРезультатов) Экспорт

	СохранитьВGenericCoverage(КаталогРезультатов);
	// ПомошникЗаписи.ЗаписатьВJson(ПолеДанныеПокрытия.Результат, КаталогРезультатов + "/result.json");

КонецПроцедуры	

Процедура СохранитьВGenericCoverage(КаталогРезультатов)

	ФайлРезультата = "/genericCoverage.xml";
	КоличествоСтрок = 0;
	ПутиКИсходникам = ПутьКФайлуКонфигурации;
	Если СтрНачинаетсяС(ПутьКФайлуКонфигурации, "./") Тогда
		ПутиКИсходникам = ТекущийКаталог() + Сред(ПутьКФайлуКонфигурации, 2);
	КонецЕсли;	

	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(КаталогРезультатов + ФайлРезультата);
	ЗаписьXML.ЗаписатьНачалоЭлемента("coverage");
	ЗаписьXML.ЗаписатьАтрибут("version", "1");

	// ФайлРезультата = "/emptyCover.xml";
	// ЗаписьXMLEmpty = Новый ЗаписьXML();

	// ЗаписьXMLEmpty.ОткрытьФайл(КаталогРезультатов + ФайлРезультата);
	// ЗаписьXMLEmpty.ЗаписатьНачалоЭлемента("coverage");
	// ЗаписьXMLEmpty.ЗаписатьАтрибут("version", "1");


	Для Каждого Модуль Из ПолеДанныеПокрытия.Результат Цикл
	
		Если ПустаяСтрока(Модуль.Значение.Путь) Тогда
			Продолжить;
		КонецЕсли;

		// СформироватьПустойКовер(ЗаписьXMLEmpty, Модуль.Значение.Путь, ПутиКИсходникам);

		ЗаписьXML.ЗаписатьНачалоЭлемента("file");
		// fixme
		ПутьКМодулю = ПутиКИсходникам + Модуль.Значение.Путь;
		ПутьКМодулю = СтрЗаменить(ПутьКМодулю, "/", "\");
		ЗаписьXML.ЗаписатьАтрибут("path", ПутьКМодулю);
	
		Для Каждого СтрокаМодуля Из Модуль.Значение.Строки Цикл

			ЗаписьXML.ЗаписатьНачалоЭлемента("lineToCover");
			ЗаписьXML.ЗаписатьАтрибут("lineNumber", СтрокаМодуля.НомерСтроки);
			ЗаписьXML.ЗаписатьАтрибут("covered", "true");
			ЗаписьXML.ЗаписатьКонецЭлемента();

			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;	


	// ЗаписьXMLEmpty.ЗаписатьКонецЭлемента();
	// ЗаписьXMLEmpty.Закрыть();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();

	Сообщить(КоличествоСтрок);

КонецПроцедуры	

Процедура СформироватьПустойКовер(ЗаписьXML, ИмяФайла, ПутиКИсходникам) Экспорт
	
	ПутьКФайлу = ПутиКИсходникам  + ИмяФайла;

	ЗаписьXML.ЗаписатьНачалоЭлемента("file");
	ЗаписьXML.ЗаписатьАтрибут("path", ПутьКФайлу);
	
	TextReader = New ЧтениеТекста(ПутьКФайлу);
	
	Строка = TextReader.ПрочитатьСтроку();

	НомерСтроки = 0;
	Пока НЕ Строка = Неопределено Цикл 

		НомерСтроки = НомерСтроки + 1;
		
		СокрЛПСтрока = СокрЛП(Строка);
		Если НЕ ПустаяСтрока(СокрЛПСтрока) 
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "//") 
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "Процедура") 
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "Функция") 
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "&") 
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "#") 	
			И НЕ СтрНачинаетсяС(СокрЛПСтрока, "Перем ") Тогда

			ЗаписьXML.ЗаписатьНачалоЭлемента("lineToCover");
			ЗаписьXML.ЗаписатьАтрибут("lineNumber", НомерСтроки);
			ЗаписьXML.ЗаписатьАтрибут("covered", "false");
			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЕсли;	

		Строка = TextReader.ПрочитатьСтроку();

	КонецЦикла;	

	ЗаписьXML.ЗаписатьКонецЭлемента();


КонецПроцедуры	